/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/admin/backends": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all backends
         * @description Get a list of all configured backend services
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BackendService"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new backend
         * @description Add a new backend service configuration
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Backend configuration */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BackendService"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BackendService"];
                    };
                };
                /** @description Invalid request body */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/backends/{id}/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get backend health status
         * @description Get health status of a specific backend service
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Backend ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServiceHealthStatus"];
                    };
                };
                /** @description Backend not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/reload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reload configuration
         * @description Reload the router configuration from file
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
                /** @description Failed to reload configuration */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/routes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all routes
         * @description Get a list of all configured routes
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RouteConfig"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new route
         * @description Add a new route configuration
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Route configuration */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RouteConfig"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RouteConfig"];
                    };
                };
                /** @description Invalid request body */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/routes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a route by ID
         * @description Get details of a specific route
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Route ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RouteConfig"];
                    };
                };
                /** @description Route not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        /**
         * Update a route
         * @description Update an existing route configuration
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Route ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Updated route configuration */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RouteConfig"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RouteConfig"];
                    };
                };
                /** @description Invalid request body */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Route not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a route
         * @description Remove a route configuration
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Route ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Route not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dtako/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Dtako Events
         * @description Get event data with location information and optional filtering
         */
        get: {
            parameters: {
                query: {
                    /** @description Start date (YYYY-MM-DD) */
                    from?: string;
                    /** @description End date (YYYY-MM-DD) */
                    to?: string;
                    /** @description Event type filter */
                    type?: string;
                    /** @description 運行NO (Required for performance reasons) */
                    unko_no: string;
                    /** @description Maximum number of records to return (default: 100, max: 1000) */
                    limit?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of dtako events */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid request parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dtako/events/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import Dtako Events
         * @description Import event data from production database
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Import successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dtako/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Dtako Event by ID
         * @description Get specific event data by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Dtako event found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dtako/ferry_rows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List ferry row records
         * @description Retrieve ferry row records with optional date range and ferry company filter
         */
        get: {
            parameters: {
                query?: {
                    /** @description Start date (YYYY-MM-DD) */
                    from?: string;
                    /** @description End date (YYYY-MM-DD) */
                    to?: string;
                    /** @description Filter by ferry company name */
                    ferry_company?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dtako/ferry_rows/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import ferry row records from production
         * @description Import ferry row records from production database for a date range
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dtako/ferry_rows/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get ferry row record by ID
         * @description Retrieve a specific ferry row record by its ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ferry row record ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dtako/rows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Dtako Rows
         * @description Get vehicle operation data with optional date and vehicle filtering
         */
        get: {
            parameters: {
                query?: {
                    /** @description Start date (YYYY-MM-DD) */
                    from?: string;
                    /** @description End date (YYYY-MM-DD) */
                    to?: string;
                    /** @description Read date (YYYY-MM-DD) */
                    read_date?: string;
                    /** @description Vehicle CC filter */
                    vehicle_cc?: string;
                    /** @description Vehicle CD filter */
                    vehicle_cd?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of dtako rows */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid request parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dtako/rows/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import Dtako Rows
         * @description Import vehicle operation data from production database
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Import successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dtako/rows/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Dtako Row by ID
         * @description Get specific vehicle operation data by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Row ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Dtako row found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check endpoint
         * @description Returns the health status of the service and its backends
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthResponse"];
                    };
                };
                /** @description Service Unavailable */
                503: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AuthConfig: {
            enabled?: boolean;
            required?: boolean;
            roles?: string[];
            type?: string;
        };
        BackendService: {
            circuit_breaker?: components["schemas"]["CircuitBreakerConfig"];
            created_at?: string;
            enabled?: boolean;
            endpoints?: components["schemas"]["EndpointConfig"][];
            health_check?: components["schemas"]["HealthCheckConfig"];
            id?: string;
            load_balancer?: components["schemas"]["LoadBalancerConfig"];
            name?: string;
            retry_policy?: components["schemas"]["RetryPolicyConfig"];
            updated_at?: string;
        };
        CircuitBreakerConfig: {
            enabled?: boolean;
            failure_ratio?: number;
            interval?: number;
            max_requests?: number;
            minimum_requests?: number;
            timeout?: number;
        };
        DtakoEvent: {
            /** @example 2025-01-13T15:04:05Z */
            created_at?: string;
            /** @example Started driving from depot */
            description?: string;
            /** @example driver-123 */
            driver_code?: string;
            /** @example 2025-01-13T10:30:00Z */
            event_date?: string;
            /** @example 運転 */
            event_type?: string;
            /** @example event-456 */
            id?: string;
            /** @example 35.6762 */
            latitude?: number;
            /** @example 139.6503 */
            longitude?: number;
            /**
             * @description 運行NO - links to DtakoRow
             * @example 2025010101
             */
            unko_no?: string;
            /** @example 2025-01-13T15:04:05Z */
            updated_at?: string;
            /** @example vehicle-001 */
            vehicle_no?: string;
        };
        DtakoFerryRow: {
            /**
             * @description 乗場CD
             * @example 1
             */
            boarding_code?: number;
            /**
             * @description 乗場名
             * @example 東京港
             */
            boarding_name?: string;
            /**
             * @description 契約料金
             * @example 8000
             */
            contract_fare?: number;
            /**
             * @description 乗務員CD1
             * @example 1001
             */
            driver_code_1?: number;
            /**
             * @description 乗務員名１
             * @example 山田太郎
             */
            driver_name_1?: string;
            /**
             * @description 終了日時
             * @example 2025-01-13T12:00:00Z
             */
            end_time?: string;
            /**
             * @description 見なし距離
             * @example 500
             */
            estimated_distance?: number;
            /**
             * @description フェリー会社CD
             * @example 1
             */
            ferry_company_code?: number;
            /**
             * @description フェリー会社名
             * @example 東京フェリー
             */
            ferry_company_name?: string;
            /**
             * @description ferry_srch
             * @example 東京-大阪
             */
            ferry_search?: string;
            /** @example 1 */
            id?: number;
            /**
             * @description 降場CD
             * @example 2
             */
            landing_code?: number;
            /**
             * @description 降場名
             * @example 大阪港
             */
            landing_name?: string;
            /**
             * @description 事業所CD
             * @example 1
             */
            office_code?: number;
            /**
             * @description 事業所名
             * @example 東京事業所
             */
            office_name?: string;
            /**
             * @description 読取日
             * @example 2025-01-13T00:00:00Z
             */
            read_date?: string;
            /**
             * @description 精算区分
             * @example 1
             */
            settlement_class?: number;
            /**
             * @description 精算区分名
             * @example 現金
             */
            settlement_name?: string;
            /**
             * @description 便
             * @example 1便
             */
            ship_number?: string;
            /**
             * @description 航送車種区分
             * @example 1
             */
            ship_vehicle_class?: number;
            /**
             * @description 航送車種区分名
             * @example 大型車
             */
            ship_vehicle_name?: string;
            /**
             * @description 標準料金
             * @example 10000
             */
            standard_fare?: number;
            /**
             * @description 開始日時
             * @example 2025-01-13T08:00:00Z
             */
            start_time?: string;
            /**
             * @description 対象乗務員区分
             * @example 1
             */
            target_driver_class?: number;
            /**
             * @description 運行日
             * @example 2025-01-13T00:00:00Z
             */
            unko_date?: string;
            /**
             * @description 運行NO
             * @example 2025010101
             */
            unko_no?: string;
            /**
             * @description 車輌CD
             * @example 101
             */
            vehicle_code?: number;
            /**
             * @description 車輌名
             * @example トラック1号
             */
            vehicle_name?: string;
        };
        DtakoRow: {
            /** @example 2025-01-13T15:04:05Z */
            created_at?: string;
            /** @example 2025-01-13T00:00:00Z */
            date?: string;
            /** @example 123.45 */
            distance?: number;
            /** @example driver-123 */
            driver_code?: string;
            /** @example 45.67 */
            fuel_amount?: number;
            /** @example row-123 */
            id?: string;
            /** @example 2025-01-13T00:00:00Z */
            read_date?: string;
            /** @example route-A */
            route_code?: string;
            /**
             * @description 運行NO
             * @example 2025010101
             */
            unko_no?: string;
            /** @example 2025-01-13T15:04:05Z */
            updated_at?: string;
            /** @example vehicle-001 */
            vehicle_no?: string;
        };
        EndpointConfig: {
            healthy?: boolean;
            metadata?: {
                [key: string]: string;
            };
            url?: string;
            weight?: number;
        };
        EndpointHealthStatus: {
            message?: string;
            response_time_ms?: number;
            status?: string;
            url?: string;
        };
        ErrorResponse: {
            /** @example 400 */
            code?: number;
            /** @example Invalid request parameters */
            message?: string;
        };
        HealthCheckConfig: {
            enabled?: boolean;
            expected_status?: number[];
            healthy_threshold?: number;
            interval?: number;
            path?: string;
            timeout?: number;
            unhealthy_threshold?: number;
        };
        HealthResponse: {
            services?: {
                [key: string]: components["schemas"]["ServiceHealthInfo"];
            };
            status?: string;
            timestamp?: string;
        };
        ImportRequest: {
            /**
             * @description For events
             * @example 運転
             */
            event_type?: string;
            /**
             * @description For ferry rows
             * @example 東京フェリー
             */
            ferry_company?: string;
            /** @example 2025-01-01 */
            from_date?: string;
            /** @example 2025-01-31 */
            to_date?: string;
        };
        ImportResult: {
            errors?: string[];
            /** @example 2025-01-13T15:04:05Z */
            imported_at?: string;
            /** @example 150 */
            imported_rows?: number;
            /** @example Imported 150 rows successfully */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        LoadBalancerConfig: {
            algorithm?: string;
            sticky_session?: boolean;
        };
        RateLimitConfig: {
            burst_size?: number;
            enabled?: boolean;
            key_type?: string;
            period?: string;
            rate?: number;
            white_list?: string[];
        };
        RetryPolicyConfig: {
            backoff?: string;
            enabled?: boolean;
            initial_interval?: number;
            max_attempts?: number;
            max_interval?: number;
        };
        RouteConfig: {
            auth?: components["schemas"]["AuthConfig"];
            backend?: string;
            created_at?: string;
            enabled?: boolean;
            id?: string;
            method?: string[];
            middleware?: string[];
            path?: string;
            priority?: number;
            rate_limit?: components["schemas"]["RateLimitConfig"];
            /** @example 30000000000 */
            timeout?: number;
            updated_at?: string;
        };
        ServiceHealthInfo: {
            message?: string;
            status?: string;
        };
        ServiceHealthStatus: {
            endpoint_statuses?: {
                [key: string]: components["schemas"]["EndpointHealthStatus"];
            };
            last_checked?: string;
            message?: string;
            service_id?: string;
            status?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
